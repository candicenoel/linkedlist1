class LinkedListNode
  attr_accessor :value, :next_node

  def initialize(value, next_node=nil)
    @value = value
    @next_node = next_node
  end

  def next_node
    @next_node
  end

  def value
    @value
  end

end

def print_values(list_node)
  if list_node
    print "#{list_node.value} --> "
    print_values(list_node.next_node)
  else
    print "nil\n"
    return
  end
end


def reverse_list_mutate(list, next_node = nil)
  if list == nil
    print_values(next_node)
  else
    old_next_node = list.next_node
    list.next_node = next_node
    reverse_list(old_next_node,list)
  end
end

def reverse_list(list) #Linked List #1
  new_list = nil
  while list
    new_list = LinkedListNode.new(list.value, new_list)
    list = list.next_node
  end
  new_list
end


class Stack #Linked List #1
    attr_reader :data
   
    def initialize(value)
      @list = LinkedListNode.new(value)
    end

    def push(value)
      @list = LinkedListNode.new(value, @list)
    end

    def pop
      top_value = @list.value
      if @list.next_node
        next_node = @list.next_node.next_node || nil 
        @list = LinkedListNode.new(@list.next_node.value, next_node)
      else
        @list.value = nil
        @list.next_node = nil
      end
      top_value
    end
end


node1 = LinkedListNode.new(37, nil)
node2 = LinkedListNode.new(99, node1)
node3 = LinkedListNode.new(12, node2)
node4 = LinkedListNode.new(44, node3)
print_values(node4)

print_values(reverse_list(node4))
